name: Build Enrollment image and push to ECR (push latest + sha)

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_IMAGE_NAME: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com/enrollment-service
  GRADLE_VERSION: 7.6

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Print repo files (debug)
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la gradle || true
          ls -la gradle/wrapper || true
          cat .dockerignore || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install pinned Gradle (non-interactive) and expose to PATH
        run: |
          set -euo pipefail
          echo "Installing Gradle ${GRADLE_VERSION} to /opt (non-interactive)"
          sudo apt-get update -y
          sudo apt-get install -y curl unzip jq
          DIST="gradle-${GRADLE_VERSION}-bin.zip"
          URL="https://services.gradle.org/distributions/${DIST}"
          wget -q "$URL" -O /tmp/gradle.zip
          sudo unzip -o -q /tmp/gradle.zip -d /opt
          sudo ln -sfn "/opt/gradle-${GRADLE_VERSION}" /opt/gradle
          echo "/opt/gradle/bin" >> $GITHUB_PATH
          echo "Gradle installed: $(/opt/gradle/bin/gradle -v | head -n 1)"

      - name: (optional) Generate gradle wrapper if missing
        run: |
          set -euo pipefail
          if [ -f gradle/wrapper/gradle-wrapper.jar ]; then
            echo "gradle-wrapper.jar present, skipping wrapper generation"
          else
            /opt/gradle/bin/gradle wrapper || true
          fi

      - name: Build JAR on runner using pinned Gradle
        run: |
          set -euo pipefail
          /opt/gradle/bin/gradle --no-daemon clean bootJar -x test --warning-mode all
          ls -la build/libs || true


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build Docker image and push tags
        env:
          SHORT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          SHORT=${SHORT_SHA::7}
          LATEST_TAG=${ECR_IMAGE_NAME}:latest
          SHA_TAG=${ECR_IMAGE_NAME}:${SHORT}

          docker build -t ${SHA_TAG} .
          docker tag ${SHA_TAG} ${LATEST_TAG}
          docker push ${SHA_TAG}
          docker push ${LATEST_TAG}
          echo "IMAGE_LATEST=${LATEST_TAG}" >> $GITHUB_ENV
          echo "IMAGE_SHA=${SHA_TAG}" >> $GITHUB_ENV


      - name: Update manifest in infra and push
        env:
            IMAGE_SHA: ${{ env.IMAGE_SHA }}
            INFRA_PAT: ${{ secrets.CLASSIC_TOKEN }}
        run: |
            set -euo pipefail
            echo "=== Start update infra manifest for enrollment-service ==="

            git clone https://x-access-token:${INFRA_PAT}@github.com/DEEPDIVE-CNE-TEAM2/moyeorak-infra.git
            cd moyeorak-infra

            MANIFEST_PATH="k8s/enrollment/enrollment-all.yml"
            if [ ! -f "${MANIFEST_PATH}" ]; then
            echo "ERROR: ${MANIFEST_PATH} not found"
            exit 1
            fi

            if ! command -v yq >/dev/null 2>&1; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
            fi

            yq eval -i '(.spec.template.spec.containers[] | select(.name=="enrollment-service") .image) = strenv(IMAGE_SHA)' "${MANIFEST_PATH}"

            git config user.email "github-actions@github.com"
            git config user.name "github-actions"

            if git diff --quiet -- "${MANIFEST_PATH}"; then
            echo "No change in ${MANIFEST_PATH}"
            exit 0
            fi

            git add "${MANIFEST_PATH}"
            git commit -m "ci: update enrollment-service image -> ${IMAGE_SHA}"

            git push https://x-access-token:${INFRA_PAT}@github.com/DEEPDIVE-CNE-TEAM2/moyeorak-infra.git main



      - name: Trigger ArgoCD sync via CLI (root app)
        env:
            ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
            ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
            ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
            set -euo pipefail
            echo "---- ArgoCD CLI sync with root app ----"

            HOST="${ARGOCD_SERVER#https://}"
            HOST="${HOST#http://}"
            HOST="${HOST%/}"
            echo "Using ArgoCD host: $HOST"

            # ArgoCD CLI 다운로드
            curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -o ./argocd
            chmod +x ./argocd
            ./argocd version --client || true

            # 로그인
            ./argocd login "$HOST" --username "$ARGOCD_USERNAME" --password "$ARGOCD_PASSWORD" --insecure

            # root 앱 기준 sync
            ./argocd app sync moyeorak-root --prune --force --grpc-web

      - name: Cleanup local images
        run: docker image prune -af || true
