name: Build and Deploy Enrollment Service (ECR + ArgoCD)

on:
  push:
    branches:
      - main
      - dev

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_IMAGE_NAME: 004407157704.dkr.ecr.ap-northeast-2.amazonaws.com/enrollment-service

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # ✅ jar 빌드 추가
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build and Push Docker Image
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          SHA_TAG=${ECR_IMAGE_NAME}:${SHORT_SHA}
          LATEST_TAG=${ECR_IMAGE_NAME}:latest

          echo "Building image: ${SHA_TAG}"
          docker build -t ${SHA_TAG} .

          echo "Tagging as latest: ${LATEST_TAG}"
          docker tag ${SHA_TAG} ${LATEST_TAG}

          echo "Pushing both tags..."
          docker push ${SHA_TAG}
          docker push ${LATEST_TAG}

          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
          echo "IMAGE_SHA=${SHA_TAG}" >> $GITHUB_ENV
          echo "IMAGE_LATEST=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Clone infra repo
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_PAT }}@github.com/DEEPDIVE-CNE-TEAM2/moyeorak-infra.git infra
          cd infra
          git checkout main

      - name: Update infra manifest with new image
        run: |
          cd infra
          NEW_IMAGE="${ECR_IMAGE_NAME}:${SHORT_SHA}"
          echo "Updating image -> $NEW_IMAGE"
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq eval -i '(.spec.template.spec.containers[] | select(.name=="enrollment") .image) = strenv(NEW_IMAGE)' k8s/enrollment/enrollment-all.yml
          git config user.email "github-actions@github.com"
          git config user.name "github-actions"
          git add k8s/enrollment/enrollment-all.yml
          git commit -m "ci: update enrollment-service image -> ${NEW_IMAGE}" || echo "No changes to commit"
          git push origin main

      - name: Trigger ArgoCD Sync
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_APP: enrollment
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq curl

          echo "Triggering ArgoCD sync for app: ${ARGOCD_APP}"
          curl -s -k -X POST "https://${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP}/sync" \
            -H "Authorization: Bearer ${ARGOCD_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{}'

          echo "Polling ArgoCD status..."
          for i in $(seq 1 30); do
            sleep 5
            STATUS_JSON=$(curl -s -k -H "Authorization: Bearer ${ARGOCD_TOKEN}" \
              "https://${ARGOCD_SERVER}/api/v1/applications/${ARGOCD_APP}/status")

            PHASE=$(echo "$STATUS_JSON" | jq -r '.status.operationState.phase // empty')
            SYNC_STATUS=$(echo "$STATUS_JSON" | jq -r '.status.sync.status // empty')
            CUR_STATUS=${PHASE:-$SYNC_STATUS}
            echo "[$i/30] ArgoCD status: $CUR_STATUS"

            if [ "$CUR_STATUS" = "Succeeded" ] || [ "$CUR_STATUS" = "Synced" ]; then
              echo "ArgoCD sync succeeded."
              exit 0
            fi
            if [ "$CUR_STATUS" = "Failed" ] || [ "$CUR_STATUS" = "Error" ]; then
              echo "ArgoCD sync failed."
              echo "$STATUS_JSON" | jq .
              exit 1
            fi
          done

          echo "ArgoCD sync timed out after 150s"
          echo "$STATUS_JSON" | jq .
          exit 1

      - name: Cleanup local images
        run: docker image prune -af || true
